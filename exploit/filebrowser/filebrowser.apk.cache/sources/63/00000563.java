package com.mobisec.filebrowser;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.view.ViewCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.security.Key;
import java.security.MessageDigest;
import java.util.Locale;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;

/* loaded from: classes2.dex */
public class MainActivity extends AppCompatActivity {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    public static final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static final String lower = upper.toLowerCase(Locale.ROOT);
    public static final String digits = "0123456789";
    public static final String alphanum = upper + lower + digits;

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // android.support.v7.app.AppCompatActivity, android.support.v4.app.FragmentActivity, android.support.v4.app.SupportActivity, android.app.Activity
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getContentResolver().delete(LogProvider.CONTENT_URI, null, null);
        generateKey();
        setFlag(getIntent());
        Button lsButton = (Button) findViewById(R.id.ls);
        Button duButton = (Button) findViewById(R.id.du);
        Button catButton = (Button) findViewById(R.id.cat);
        final EditText filenameWidget = (EditText) findViewById(R.id.filename);
        TextView textView = (TextView) findViewById(R.id.result);
        Button getflagButton = (Button) findViewById(R.id.getflag);
        final TextView flagWidget = (TextView) findViewById(R.id.flag);
        Button aboutButton = (Button) findViewById(R.id.about);
        lsButton.setOnClickListener(new View.OnClickListener() { // from class: com.mobisec.filebrowser.MainActivity.1
            @Override // android.view.View.OnClickListener
            public void onClick(View v) {
                String arg = filenameWidget.getText().toString();
                MainActivity.this.startQuery("ls", arg);
            }
        });
        duButton.setOnClickListener(new View.OnClickListener() { // from class: com.mobisec.filebrowser.MainActivity.2
            @Override // android.view.View.OnClickListener
            public void onClick(View v) {
                String arg = filenameWidget.getText().toString();
                MainActivity.this.startQuery("du", arg);
            }
        });
        catButton.setOnClickListener(new View.OnClickListener() { // from class: com.mobisec.filebrowser.MainActivity.3
            @Override // android.view.View.OnClickListener
            public void onClick(View v) {
                String arg = filenameWidget.getText().toString();
                MainActivity.this.startQuery("cat", arg);
            }
        });
        getflagButton.setOnClickListener(new View.OnClickListener() { // from class: com.mobisec.filebrowser.MainActivity.4
            @Override // android.view.View.OnClickListener
            public void onClick(View v) {
                flagWidget.setText("Getting flag....");
                flagWidget.setTextColor(ViewCompat.MEASURED_STATE_MASK);
                try {
                    String flag = MainActivity.this.getFlag();
                    flagWidget.setText(flag);
                } catch (Exception e) {
                    Log.e("MOBISEC", "Exception while getting the flag:" + Log.getStackTraceString(e));
                    flagWidget.setText("An error occurred when getting flag");
                }
            }
        });
        aboutButton.setOnClickListener(new View.OnClickListener() { // from class: com.mobisec.filebrowser.MainActivity.5
            @Override // android.view.View.OnClickListener
            public void onClick(View v) {
                MainActivity mainActivity = MainActivity.this;
                mainActivity.startActivity(new Intent(mainActivity, AboutActivity.class));
            }
        });
    }

    @Override // android.support.v4.app.FragmentActivity, android.app.Activity
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        String res;
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 400 && (res = data.getStringExtra("result")) != null) {
            TextView resultWidget = (TextView) findViewById(R.id.result);
            resultWidget.setText(res);
        }
    }

    private void generateKey() {
        String key = getRandomString(20);
        SharedPreferences.Editor editor = getSharedPreferences("keys", 0).edit();
        editor.putString("key", key);
        editor.commit();
    }

    private static String getKey(Context ctx) throws Exception {
        SharedPreferences prefs = ctx.getSharedPreferences("keys", 0);
        String key = prefs.getString("key", null);
        if (key == null) {
            throw new Exception("key not found");
        }
        return key;
    }

    private static byte[] getAesKey(Context ctx) throws Exception {
        String key = getKey(ctx);
        return hash(key.getBytes());
    }

    public void startQuery(String oper, String arg) {
        Intent i = new Intent(this, QueryActivity.class);
        i.putExtra("oper", oper);
        i.putExtra("arg", arg);
        startActivityForResult(i, 400);
    }

    public static void logQuery(Context ctx, String oper, String arg) {
        try {
            byte[] aesKey = getAesKey(ctx);
            String encOper = bin2hex(encrypt(oper.getBytes(), aesKey));
            String encValue = bin2hex(encrypt(arg.getBytes(), aesKey));
            rawLogQuery(ctx, encOper, encValue);
        } catch (Exception e) {
        }
    }

    public static Uri rawLogQuery(Context ctx, String oper, String arg) {
        ContentValues values = new ContentValues();
        values.put("oper", oper);
        values.put("arg", arg);
        Uri uri = ctx.getContentResolver().insert(LogProvider.CONTENT_URI, values);
        return uri;
    }

    public static boolean writeToFile(String fp, String data) {
        try {
            FileOutputStream fos = new FileOutputStream(fp);
            fos.write(data.getBytes(Charset.defaultCharset()));
            fos.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private void setFlag(Intent intent) {
        String flag = null;
        if (intent != null) {
            flag = intent.getStringExtra("flag");
        }
        if (flag == null) {
            flag = "dummyflag";
        }
        logQuery(this, "genflag", flag);
        Log.e("MOBISEC", "flag set correctly");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public String getFlag() throws Exception {
        byte[] aesKey = getAesKey(this);
        String encOper = bin2hex(encrypt("genflag".getBytes(), aesKey));
        Uri infoEntries = Uri.parse("content://com.mobisec.provider.Log/log");
        Cursor c = getContentResolver().query(infoEntries, null, null, null, "oper");
        if (c.moveToFirst()) {
            do {
                c.getString(c.getColumnIndex("id"));
                String oper = c.getString(c.getColumnIndex("oper"));
                String arg = c.getString(c.getColumnIndex("arg"));
                if (oper.equals(encOper)) {
                    return new String(decrypt(hex2bin(arg), aesKey));
                }
            } while (c.moveToNext());
            return null;
        }
        return null;
    }

    public static byte[] encrypt(byte[] in, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(1, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(in);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        byte[] out = outputStream.toByteArray();
        return out;
    }

    public static byte[] decrypt(byte[] ct, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(2, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(ct);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        byte[] out = outputStream.toByteArray();
        return out;
    }

    public static byte[] hash(byte[] in) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(in);
        return md.digest();
    }

    public static String getRandomString(int len) {
        Random generator = new Random();
        StringBuilder randomStringBuilder = new StringBuilder();
        for (int i = 0; i < len; i++) {
            String str = alphanum;
            char tempChar = str.charAt(generator.nextInt(str.length()));
            randomStringBuilder.append(tempChar);
        }
        return randomStringBuilder.toString();
    }

    static String bin2hex(byte[] data) {
        return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1, data));
    }

    public static byte[] hex2bin(String hex) throws NumberFormatException {
        if (hex.length() % 2 > 0) {
            throw new NumberFormatException("Hexadecimal input string must have an even length.");
        }
        byte[] r = new byte[hex.length() / 2];
        int i = hex.length();
        while (i > 0) {
            int i2 = i - 1;
            i = i2 - 1;
            r[(i / 2) - 1] = (byte) (digit(hex.charAt(i2)) | (digit(hex.charAt(i)) << 4));
        }
        return r;
    }

    private static int digit(char ch) {
        int r = Character.digit(ch, 16);
        if (r < 0) {
            throw new NumberFormatException("Invalid hexadecimal string: " + ch);
        }
        return r;
    }
}